Design Responsivo

RWD - Responsive Web Design - um conjunto de práticas que permite que páginas da Web alterem seu layout e aparência para se adequarem a diferentes larguras, resoluções, etc.

Em 2004, Cameron Adams escreveu um artigo intitulado Resolution dependent layout (https://www.themaninblue.com/writing/perspective/2004/09/21/), descrevendo um método para criar um design que pudesse se adaptar a diferentes resoluções de tela. Essa abordagem necessitava do JavaScript para detectar a resolução da tela e carregar o CSS correto.

O termo design responsivo foi cunhado por Ethan Marcotte em 2010 (https://alistapart.com/article/responsive-web-design/), e descreveu o uso de três técnicas combinadas.

    1. A primeira foi a ideia de grids fluidas, que já estava sendo explorada por Gillenwater, e pode ser encontrada no artigo de Marcotte, Fluid Grids (publicado em 2009 em A List Apart). 
    2. A segunda técnica foi a ideia de imagens fluidas. Usando uma técnica muito simples que setava a propriedade max-width com 100%, as imagens seriam reduzidas se a coluna que as continha se tornasse mais estreita que o tamanho intrínseco da imagem, mas nunca aumentariam. Isso permitiu que uma imagem fosse reduzida em tamanho para caber em uma coluna de tamanho flexível, em vez de transbordar, mas não aumentava e nem tornava-se pixelizada se a coluna fosse mais larga que a imagem. 
    3. O terceiro componente-chave foi a media query. Media Queries habilitavam o tipo de opção de layout usando o JavaScript, que Cameron Adams havia explorado anteriormente, usando apenas CSS. Em vez de ter um layout para todos os tamanhos de tela, o layout podia ser alterado. As barras laterais podiam ser reposicionadas para a tela menor ou uma navegação alternativa podia ser exibida. 

É importante entender que o design responsivo não é uma tecnologia separada — é um termo usado para descrever uma abordagem ao web design, ou um conjunto de melhores práticas, usado para criar um layout que possa responder ao dispositivo que está sendo usado para visualizar o conteúdo.

Media Queries

O Design Responsivo apenas foi capaz de emergir devido o recurse de media query. A especificação Media Queries Level 3 se tornou uma Recomendação de Candidato em 2009, significando que estava pronto para ser implementado nos browsers. Media Queries nos permitem executar uma série de testes (e.g. se a tela do usuário é maior que uma certa largura, ou uma certa resolução) e aplicar um CSS seletivamente para estilizar a página de acordo com as necessidades do usuário.
Por exemplo, a seguinte media querie testa se a página atual está sendo exibida como mídia de tela (portanto, não é um documento impresso) e o viewport tem pelo menos 800 pixels de largura. O CSS para o seletor .container será aplicado apenas se essas duas condições forem verdade.
@media screen and (min-width: 800px) {
  .container {
    margin: 1em 2em;
  }
}

Você pode adicionar múltiplos media queries dentro de uma folha de estilo, ajustando inteiramente seu layout ou partes dele que melhor se adequem a vários tamanhos de tela. Os pontos em quem uma Media Query é introduzida e o layout alterado são conhecidos como breakpoints.

Uma abordagem comum ao utilizar Media Queries é criar um layout de única coluna para dispositivos de telas pequenas (e.g smartphones), então fazer a checagem para telas maiores e implementar um layout de múltiplas colunas quando houver largura suficiente. Esse design é frequentemente descrito como mobile first.

Encontre mais detalhes na documentação MDN para Media Queries (https://developer.mozilla.org/pt-BR/docs/Web/CSS/Media_Queries).

Grids Flexíveis

Sites responsivos não apenas mudam seu layout entre breakpoints, eles são construídos em grids flexíveis. Um grid flexível significa que não há necessidade de marcar todos os tamanhos possíveis existentes, e sim, construir um layout perfeito baseado em pixels que se adequa automaticamente à tela. Essa abordagem seria impossível dado o vasto número de dispositivos com tamanhos diferentes que existem e o fato de que, mesmo nos desktops, as pessoas nem sempre utilizam a janela do navegador maximizada.

Tecnologias modernas de layout

Multicol

The oldest of these layout methods is multicol — when you specify a column-count, this indicates how many columns you want your content to be split into. The browser then works out the size of these, a size that will change according to the screen size.

.container {
  column-count: 3;
}

If you instead specify a column-width, you are specifying a minimum width. The browser will create as many columns of that width as will comfortably fit into the container, then share out the remaining space between all the columns. Therefore the number of columns will change according to how much space there is.

.container {
  column-width: 10em;
}

Flexbox

In Flexbox, flex items will shrink and distribute space between the items according to the space in their container, as their initial behavior. By changing the values for flex-grow and flex-shrink you can indicate how you want the items to behave when they encounter more or less space around them.
In the example below the flex items will each take an equal amount of space in the flex container, using the shorthand of flex: 1 as described in the layout topic Flexbox: Flexible sizing of flex items.

.container {
  display: flex;
}

.item {
  flex: 1;
}

Nota: As an example we have rebuilt the simple responsive layout above, this time using flexbox. You can see how we no longer need to use strange percentage values to calculate the size of the columns: example, source code.

CSS grid
In CSS Grid Layout the fr unit allows the distribution of available space across grid tracks. The next example creates a grid container with three tracks sized at 1fr. This will create three column tracks, each taking one part of the available space in the container. You can find out more about this approach to create a grid in the Learn Layout Grids topic, under Flexible grids with the fr unit.

.container {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
}

Nota: The grid layout version is even simpler as we can define the columns on the .wrapper: example, source code.

Responsive images

The simplest approach to responsive images was as described in Marcotte's early articles on responsive design. Basically, you would take an image that was at the largest size that might be needed, and scale it down. This is still an approach used today, and in most stylesheets you will find the following CSS somewhere:

img {
  max-width: 100%:
}

Responsive typography

An element of responsive design not covered in earlier work was the idea of responsive typography. Essentially, this describes changing font sizes within media queries to reflect lesser or greater amounts of screen real estate.
In this example, we want to set our level 1 heading to be 4rem, meaning it will be four times our base font size. That's a really large heading! We only want this jumbo heading on larger screen sizes, therefore we first create a smaller heading then use media queries to overwrite it with the larger size if we know that the user has a screen size of at least 1200px.

html {
  font-size: 1em;
}

h1 {
  font-size: 2rem;
}

@media (min-width: 1200px) {
  h1 {
    font-size: 4rem;
  }
}

We have edited our responsive grid example above to also include responsive type using the method outlined. You can see how the heading switches sizes as the layout goes to the two column version.
On mobile the heading is smaller:
 
On desktop however we see the larger heading size:

https://github.com/mdn/css-examples/blob/main/learn/rwd/type-rwd.html

Using viewport units for responsive typography

An interesting approach is to use the viewport unit vw to enable responsive typography. 1vw is equal to one percent of the viewport width, meaning that if you set your font size using vw, it will always relate to the size of the viewport.

h1 {
  font-size: 6vw;
}

The problem with doing the above is that the user loses the ability to zoom any text set using the vw unit, as that text is always related to the size of the viewport. Therefore you should never set text using viewport units alone.
There is a solution, and it involves using calc(). If you add the vw unit to a value set using a fixed size such as ems or rems then the text will still be zoomable. Essentially, the vw unit adds on top of that zoomed value:

h1 {
  font-size: calc(1.5rem + 3vw);
}

This means that we only need to specify the font size for the heading once, rather than set it up for mobile and redefine it in the media queries. The font then gradually increases as you increase the size of the viewport.
Nota: See an example of this in action: example, source code.

https://github.com/mdn/css-examples/blob/main/learn/rwd/type-vw.html

The viewport meta tag

If you look at the HTML source of a responsive page, you will usually see the following <meta> tag in the <head> of the document.
<meta name="viewport" content="width=device-width,initial-scale=1">

This meta tag tells mobile browsers that they should set the width of the viewport to the device width, and scale the document to 100% of its intended size, which shows the document at the mobile-optimized size that you intended.
Why is this needed? Because mobile browsers tend to lie about their viewport width.

This meta tag exists because when the original iPhone launched and people started to view websites on a small phone screen, most sites were not mobile optimized. The mobile browser would therefore set the viewport width to 960 pixels, render the page at that width, and show the result as a zoomed-out version of the desktop layout. Other mobile browsers (e.g. on Google Android) did the same thing. Users could zoom in and pan around the website to view the bits they were interested in, but it looked bad. You will still see this today if you have the misfortune to come across a site that does not have a responsive design.

The trouble is that your responsive design with breakpoints and media queries won't work as intended on mobile browsers. If you've got a narrow screen layout that kicks in at 480px viewport width or less, and the viewport is set at 960px, you'll never see your narrow screen layout on mobile. By setting width=device-width you are overriding Apple's default width=960px with the actual width of the device, so your media queries will work as intended.

So you should always include the above line of HTML in the head of your documents.

There are other settings you can use with the viewport meta tag, however in general the above line is what you will want to use.

    • initial-scale: Sets the initial zoom of the page, which we set to 1. 
    • height: Sets a specific height for the viewport. 
    • minimum-scale: Sets the minimum zoom level. 
    • maximum-scale: Sets the maximum zoom level. 
    • user-scalable: Prevents zooming if set to no. 

You should avoid using minimum-scale, maximum-scale, and in particular setting user-scalable to no. Users should be allowed to zoom as much or as little as they need to; preventing this causes accessibility problems.

Nota: There is a CSS @ rule designed to replace the viewport meta tag — @viewport (en-US) — however it has poor browser support. It was implemented in Internet Explorer and Edge, however once the Chromium-based Edge ships it will no longer be part of the Edge browser.

https://developer.mozilla.org/pt-BR/docs/Learn/CSS/CSS_layout/Responsive_Design

E essa melhoria na experiência do usuário significa maiores conversões e crescimento dos negócios.

O design responsivo é uma abordagem ao web design que faz com que seu conteúdo web se adapte aos diferentes tamanhos de tela e janelas de uma variedade de dispositivos.

O projeto responsivo adapta a renderização de uma única versão de página.

Com design responsivo, os usuários acessarão o mesmo arquivo básico através de seu navegador, independentemente do dispositivo, mas o código CSS controlará o layout e o renderizará de forma diferente com base no tamanho da tela.

O tráfego da web móvel ultrapassou a área de trabalho e agora constitui a maior parte do tráfego do site, representando mais de 51% (https://kinsta.com/pt/blog/trafego-para-o-seu-site/).

Web Design Responsivo vs Adaptativo

A diferença entre o projeto responsivo e o projeto adaptativo é que o projeto responsivo adapta a renderização de uma única versão de página. Em contraste, o design adaptativo fornece várias versões completamente diferentes de uma mesma página.

Os usuários em dispositivos móveis também constituem a maioria das visitas aos mecanismos de busca.
https://www.statista.com/statistics/275814/mobile-share-of-organic-search-engine-visits/

CSS e HTML
A base do design responsivo é a combinação de HTML e CSS, duas linguagens que controlam o conteúdo e o layout de uma página em qualquer navegador da web.

O HTML controla principalmente a estrutura, os elementos e o conteúdo de uma página web. Por exemplo, para adicionar uma imagem a um site, você tem que usar código HTML como este:
<img src="image.gif" alt="image" class=”full-width-img”>

Você também poderia controlar atributos primários tais como altura e largura dentro de seu HTML, mas isto não é mais considerado a melhor prática.

Por exemplo, poderíamos editar a largura de todas as imagens HTML no nível do elemento desta forma:

img {
    width: 100%;
}

Ou poderíamos visar a classe específica “full-width-img”, acrescentando um período na frente.

.full-width-img {
    width: 100%;
}

Midia Queries
Uma midia query é uma parte fundamental do CSS3 que lhe permite renderizar conteúdo para se adaptar a diferentes fatores como tamanho ou resolução da tela.

Funciona de forma semelhante a uma “cláusula if” em algumas linguagens de programação, basicamente verificando se a janela de visão de uma tela é suficientemente ampla ou muito ampla antes de executar o código apropriado.

@media screen and (min-width: 780px) {
    .full-width-img {
    margin: auto;
    width: 90%;
}

Se a tela tiver pelo menos 780 pixels de largura, as imagens da classe “full-width-img” ocuparão 90% da tela e serão automaticamente centralizadas por margens igualmente amplas.

Flexbox é um módulo CSS projetado como uma forma mais eficiente de disposição de múltiplos elementos, mesmo quando o tamanho do conteúdo dentro do contêiner é desconhecido.
Um recipiente flexível expande os itens para preencher o espaço livre disponível ou os encolhe para evitar o transbordamento.

Imagens de resposta

A iteração mais básica de imagens responsivas segue o mesmo conceito de layout fluido, utilizando uma unidade dinâmica para controlar a largura ou altura. A amostra de código CSS que cobrimos anteriormente já realiza isto:

img {
    width: 100%;
}

A % unidade aproxima-se de uma única porcentagem da largura ou altura do viewport e garante que a imagem permaneça em proporção à tela.

O problema com esta abordagem é que todo usuário tem que baixar a imagem em tamanho real, mesmo em celulares.

Para servir diferentes versões escalonadas para diferentes dispositivos, você precisa usar o atributo HTML srcset em suas tags img, para especificar mais de um tamanho de imagem para escolher.

<img srcset="large-img.jpg 1024w,
middle-img.jpg 640w,
small-img.jpg  320w"
src="small.jpg"
/>

Pontos de Interrupção Reagentes Comuns
Para trabalhar com consultas da mídia, você precisa decidir sobre os “pontos de interrupção responsivos” ou pontos de interrupção de tamanho de tela. Um ponto de parada é a largura da tela onde você usa uma consulta de mídia para implementar novos estilos de CSS.
Tamanhos de tela comuns
    • Móvel: 360 x 640 
    • Móvel: 375 x 667 
    • Móvel: 360 x 720 
    • iPhone X: 375 x 812 
    • Pixel 2: 411 x 731 
    • Tabuleiro: 768 x 1024 
    • Portátil: 1366 x 768 
    • Laptop ou desktop de alta resolução: 1920 x 1080 
Se você escolher uma primeira abordagem móvel para o projeto, com uma única coluna e tamanhos de fonte menores como base, você não precisará incluir pontos de parada móveis – a menos que você queira otimizar o projeto para modelos específicos.

Pontos de Interrupção Responsivos Bootstrap
Como uma das primeiras e mais populares estruturas de resposta, a Bootstrap liderou o ataque ao design estático da web e ajudou a estabelecer o design móvel-primeiro como um padrão da indústria.
Como resultado, muitos designers até hoje ainda seguem os pontos de quebra de largura de tela da Bootstrap.

Como fazer com que seu site responda

Agora que você está familiarizado com os blocos de construção, é hora de tornar o seu website responsivo.

    1. Defina suas faixas de consulta de mídia (Pontos de Interrupção Responsivos)
    2. Elementos de Layout de Tamanho com Porcentagens ou Criar um Layout de Grade CSS
    3. Implementar Imagens Responsivas
    4. Tipografia Responsiva para o texto de seu site
    5. Resposta de teste

Defina suas faixas de consulta de mídia (Pontos de Interrupção Responsivos)
Defina seus intervalos de consulta de mídia com base nas necessidades exclusivas de seu projeto. Por exemplo, se quiséssemos seguir os padrões Bootstrap para nosso projeto, usaríamos as seguintes consultas de mídia:
    • 576px para telefones retrato 
    • 768px para comprimidos 
    • 992px para laptops 
    • 1200px para grandes dispositivos 

Tentar usar somente estes 4 (testar)

Usando uma abordagem mobile-first, você pode estilizar os principais elementos de layout como este (sem consulta de mídia para os estilos básicos para telefones celulares):

#wrapper {width:95%;  margin: 0 auto; }

#header {width:100%; }

#content {width:100%; }

#sidebar {width:100%; }

#footer {width:100%; }


// Small devices (landscape phones, 576px and up)

@media (min-width: 576px) {


// Medium devices (tablets, 768px and up)

@media (min-width: 768px) {

#wrapper {width:90%;  margin: 0 auto; }

#content {width:70%; float:left; }

#sidebar {width:30%; float:right; }


// Large devices (desktops, 992px and up)

@media (min-width: 992px) { ... }

}


// Extra large devices (large desktops, 1200px and up)

@media (min-width: 1200px) {

#wrapper {width:90%;  margin: 0 auto; }

}

Certifique-se de incluir sempre um srcset que com tamanhos diferentes de sua foto quando você adicionar imagens a suas páginas.

Mas para um design verdadeiramente responsivo, você também deve ajustar o tamanho de suas fontes de forma apropriada para combinar com o tamanho da tela.

Você pode direcionar múltiplos elementos de texto ao mesmo tempo, usando uma vírgula para separar cada um deles.
@media (min-width: 992px) {

    body, p, a, h4 {

        font-size: 14px;

    }

}

Unidades e valores do CSS para projeto responsivo

O CSS possui tanto unidades de medida absolutas quanto relativas. Um exemplo de unidade absoluta de comprimento é um cm ou um px. Unidades relativas ou valores dinâmicos dependem do tamanho e da resolução da tela ou do tamanho da fonte do elemento raiz.

PX vs EM vs REM vs Viewport Units para projeto responsivo

    • PX – um único pixel 
    • EM – unidade relativa com base no tamanho da fonte do elemento. 
    • REM – unidade relativa com base no tamanho da fonte do elemento. 
    • VH, VW – % da altura ou largura do viewport. 
    • % – a porcentagem do elemento pai. 

Um novo web designer ou desenvolvedor deve provavelmente ficar com pixels para texto porque eles são a unidade de comprimento mais direta no CSS.
Mas ao definir a largura e a largura máxima das imagens e outros elementos, usar % é a melhor solução. Esta abordagem garantirá que os componentes se ajustem ao tamanho da tela de cada dispositivo.

Exemplos

Seu layout de tablet simplesmente remove parte do espaço branco e adiciona uma seção de ícones com rolagem para caber mais conteúdo em um pacote menor.

Sem uma compreensão básica de HTML e CSS, pode ser fácil cometer erros.

https://kinsta.com/pt/blog/design-responsivo-web/

Did you know? 57% of internet users say they won’t recommend a business with a poorly designed website on mobile. This isn’t surprising since, in the first quarter of 2021, mobile devices generated 54.8% of global website traffic.
https://blog.hubspot.com/marketing/web-design-stats-for-2020

Responsive Design Testing on Real Devices 

https://www.browserstack.com/responsive

Use breakpoints for the most commonly used device resolutions used across mobile, desktop, and tablet. These would be:
    • 1920×1080 (9.61%)
    • 1366×768 (7.87%)
    • 360×640 (4.36%)
    • 414×896 (4.34%)
    • 1536×864 (4.11%)

One could also set breakpoints for common device groups instead of specific devices:

/* Extra small devices (phones, 600px and down) */
@media only screen and (max-width: 600px) {...}
/* Small devices (portrait tablets and large phones, 600px and up) */
@media only screen and (min-width: 600px) {...}
/* Medium devices (landscape tablets, 768px and up) */
@media only screen and (min-width: 768px) {...}
/* Large devices (laptops/desktops, 992px and up) */
@media only screen and (min-width: 992px) {...}
/* Extra large devices (large laptops and desktops, 1200px and up) */
@media only screen and (min-width: 1200px) {...}

A fluid grid also helps with keeping a site visually consistent across multiple devices.

Take touchscreens into consideration

When wondering how to make a website responsive, think of touchscreens. Most mobile devices (phones and tablets) are now equipped with touchscreens. Some laptops are also catching up, offering touchscreen along with the keyboard functions.
Naturally, a responsive website will have to calibrate itself for being accessed via touchscreens. For example, let’s say there is a drop-down menu on the homepage.
    • On desktop view, each menu item must be large enough so that it can be pressed with a fingertip of a touchscreen.
    • On mobile screens, smaller elements like buttons should also be easier to detect and select.
To do so, use images, CTAs or optimize these elements to render properly on multiple screens.

Responsive Image
Use modern image tag attributes to make images responsive to multiple device and screen resolutions. Study the example below:
<style>
img {
max-width: 100%;
}
</style>

<picture>
<source type="image/webp" srcset="https://my-image.com/my-image-100.webp 1x, https://my-image.com/my-image-200.webp 2x">
<source type="image/png" srcset="https://my-image.com/my-image-100.png 1x, https://my-image.com/my-image-200.png 2x">
<img alt="my image" src="https://my-image.com/my-image-200.png" loading="lazy" width="100" height="100">
</picture>

Code breakdown:
    • Setting max-width allows the image to adjust its size based on its container width.
    • picture, source, and img tags are combined so that only one image is rendered, and that it fits best on the user’s device.
    • source is used to reference a WebP image that can be used by browsers supporting it. A second source tag references a PNG file of the same image for browsers without WebP support.WebP is an image format with advanced compression for web-based images.
    • srcset notifies the browser about which image should be displayed, depending on the particular device’s screen resolution.
    • loading=”lazy” attribute / value pair: Implements native lazy loading.
Responsive Video
An effective way to create responsiveness in videos is using aspect ratio. The code below explains this:
<style>
.videoWrapper {
position: relative;
padding-bottom: 56.25%; /* 16:9 */
height: 0;
}

.videoWrapper iframe {
position: absolute;
top: 0;
left: 0;
width: 100%;
height: 100%;
}
</style>

<div class="videoWrapper">
<!-- Copy & Pasted from YouTube -->
<iframe width="560" height="349" src="http://www.youtube.com/embed/n_dZNLr2cME?rel=0&hd=1" frameborder="0" allowfullscreen></iframe>
</div>

Code Breakdown:
    • position: relative is placed on the container element so that child elements use absolution positioning relative to it.
    • height: 0 is combined with padding-bottom: 56.25% implements dynamic behavior with a 16:9 aspect ratio.
    • position: absolute, top: 0 and left: 0 is set on the iframe in order to make web elements place itself relative to their parent.
    • width and height of 100% make the child, iframe element 100% of its parent, videoWrapper which establishes the aspect ratio layout.

Define Typography
Generally, web developers define font sizes with pixels. These work on static websites, but responsive websites need a responsive font. Font size must change with respect to parent container width. This is necessary to make typography adjust to screen size and be easily readable on multiple devices.
In the CSS3 specification, look for the unit named rems. It is similar to the em unit but acts relative to the HTML element. Because of this, the code must reset the HTML font-size:
html { font-size:100%; }
Now define the responsive font sizes:
@media (min-width: 640px) { body {font-size:1rem;} }
@media (min-width:960px) { body {font-size:1.2rem;} }
@media (min-width:1100px) { body {font-size:1.5rem;} }

As far as possible, test responsive design on real devices, so as to verify what the design will look like exactly to end-users.
Once coded, put the website through a responsive design checker. BrowserStack offers a number of the latest real devices on which to check how a website looks, and if it is responsive enough.

Keep in mind that users expect any website to be perfectly complementary with every single device they own – desktop, tablet, or mobile. If a website’s responsive design does not align with a certain device resolution (especially a commonly used device), the site is at risk of missing out on a segment of its target audience. Avoid this by investing time and research into studying how to make a web page responsive at the beginning of a project.

https://www.browserstack.com/guide/how-to-create-responsive-website

What is Responsive Web Design?
Responsive Web Design is about using HTML and CSS to automatically resize, hide, shrink, or enlarge, a website, to make it look good on all devices (desktops, tablets, and phones):

Setting The Viewport
To create a responsive website, add the following <meta> tag to all your web pages:
Example
<meta name="viewport" content="width=device-width, initial-scale=1.0"> 
This will set the viewport of your page, which will give the browser instructions on how to control the page's dimensions and scaling.

Responsive Images
Responsive images are images that scale nicely to fit any browser size.
Using the width Property
If the CSS width property is set to 100%, the image will be responsive and scale up and down:
Example
<img src="img_girl.jpg" style="width:100%;"> 
Notice that in the example above, the image can be scaled up to be larger than its original size. A better solution, in many cases, will be to use the max-width property instead.
Using the max-width Property
If the max-width property is set to 100%, the image will scale down if it has to, but never scale up to be larger than its original size:
 
Example
<img src="img_girl.jpg" style="max-width:100%;height:auto;"> 

Show Different Images Depending on Browser Width
The HTML <picture> element allows you to define different images for different browser window sizes.
Resize the browser window to see how the image below changes depending on the width:
Example
<picture>
  <source srcset="img_smallflower.jpg" media="(max-width: 600px)">
  <source srcset="img_flowers.jpg" media="(max-width: 1500px)">
  <source srcset="flowers.jpg">
  <img src="img_smallflower.jpg" alt="Flowers">
</picture> 

<style>
.left, .right {
  float: left;
  width: 20%; /* The width is 20%, by default */
}

.main {
  float: left;
  width: 60%; /* The width is 60%, by default */
}

/* Use a media query to add a breakpoint at 800px: */
@media screen and (max-width: 800px) {
  .left, .main, .right {
    width: 100%; /* The width is 100%, when the viewport is 800px or smaller */
  }
}
</style> 
Tip: To learn more about Media Queries and Responsive Web Design, read our RWD Tutorial.
https://www.w3schools.com/css/css_rwd_intro.asp


